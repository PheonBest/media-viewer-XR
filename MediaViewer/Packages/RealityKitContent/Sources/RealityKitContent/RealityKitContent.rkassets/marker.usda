#usda 1.0
(
    defaultPrim = "marker"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "marker"
{
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Cylinder "Cylinder" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 0.025
        rel material:binding = </marker/Cylinder/DefaultMaterial>
        double radius = 0.005
        float3 xformOp:translate = (0, 0, 6.3251733e-9)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </marker/Cylinder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Sphere "Sphere_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </marker/Material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.015
        float3 xformOp:translate = (0, 0.02, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </marker/Sphere_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Material "Material"
    {
        prepend token outputs:mtlx:surface.connect = </marker/Material/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (299.25, 99.5)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor.connect = </marker/Material/Constant.outputs:out>
            float inputs:metallic = 0
            float inputs:roughness = 1
            token outputs:out
            float2 ui:nodegraph:node:pos = (51.38672, 81.5625)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 17
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:metallic"]
        }

        def Shader "Constant"
        {
            uniform token info:id = "ND_constant_color3"
            color3f inputs:value = (1, 0.14913142, 0) (
                colorSpace = "srgb_texture"
            )
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-192.09375, 43.08203)
            float2 ui:nodegraph:node:size = (151, 53)
            int ui:nodegraph:node:stackingOrder = 16
        }
    }
}

